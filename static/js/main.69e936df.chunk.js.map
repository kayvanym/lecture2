{"version":3,"sources":["mycomponents/MyBarChart.jsx","App.js","serviceWorker.js","index.js"],"names":["MyBarChart","handleYear","e","key","props","onYearFilter","chartName","target","value","console","log","co2","this","Co2Emission","undefined","dataBarChart","name","CO2","parseInt","COLORS","style","width","height","float","type","placeholder","onKeyDown","data","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","Component","App","state","indexYear1","indexYear2","indexYear3","indexYear4","handleYearFilter","Year","index","findIndex","setState","alert","fetch","response","json","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69e936df.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend\r\n} from \"recharts\";\r\n\r\nexport default class MyBarChart extends Component {\r\n  handleYear = e => {\r\n    if (e.key === \"Enter\") {\r\n      //this.setState({ yearFrom: e.target.value });\r\n      this.props.onYearFilter(this.props.chartName, e.target.value);\r\n      console.log(e.target.value);\r\n    }\r\n  };\r\n  render() {\r\n    //let { allPers } = this.props;\r\n    let co2 = this.props.Co2Emission;\r\n    if (co2 === undefined) return <p>There is no data.</p>;\r\n\r\n    const dataBarChart = [\r\n      { name: \"Gas\", CO2: parseInt(co2[\"Gas Fuel\"]) },\r\n      { name: \"Liq\", CO2: co2[\"Liquid Fuel\"] },\r\n      { name: \"Sol\", CO2: co2[\"Solid Fuel\"] },\r\n      { name: \"Cem\", CO2: co2[\"Cement\"] }\r\n    ];\r\n    const COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\", \"#BB8042\"];\r\n\r\n    console.log(co2);\r\n\r\n    return (\r\n      <div style={{ width: \"350px\", height: \"400px\", float: \"left\" }}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Year...\"\r\n          onKeyDown={e => this.handleYear(e)}\r\n        />\r\n\r\n        <BarChart\r\n          width={350}\r\n          height={400}\r\n          data={dataBarChart}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n\r\n          <Bar dataKey=\"CO2\" fill=\"#8884d8\">\r\n            <Cell fill={COLORS[0]} />)\r\n            <Cell fill={COLORS[1]} />)\r\n            <Cell fill={COLORS[2]} />)\r\n            <Cell fill={COLORS[3]} />)\r\n            <Cell fill={COLORS[4]} />)\r\n          </Bar>\r\n        </BarChart>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//export default Table;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n//import MyPieChart from \"./mycomponents/MyPieChart\";\nimport MyBarChart from \"./mycomponents/MyBarChart\";\n\nclass App extends Component {\n  state = {\n    Co2Emission: [],\n    indexYear1: 0,\n    indexYear2: 0,\n    indexYear3: 0,\n    indexYear4: 0\n  };\n\n  async componentDidMount() {\n    const url = \"https://my.api.mockaroo.com/co2.json?key=8eb9e6f0\";\n    const response = await fetch(url);\n    const data = await response.json();\n\n    this.setState({\n      Co2Emission: data\n    });\n  }\n  handleYearFilter = (chartName, Year) => {\n    let index = this.state.Co2Emission.findIndex(\n      co2 => co2.Year === parseInt(Year)\n    );\n    if (index !== -1) {\n      switch (chartName) {\n        case \"Bar1\":\n          this.setState({ indexYear1: index });\n          break;\n        case \"Bar2\":\n          this.setState({ indexYear2: index });\n          break;\n        case \"Bar3\":\n          this.setState({ indexYear3: index });\n          break;\n        case \"Bar4\":\n          this.setState({ indexYear4: index });\n          break;\n      }\n    } else {\n      alert(\"Year could not be found.\");\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Global CO2 Emission</h1>\n        <MyBarChart\n          chartName=\"Bar1\"\n          Co2Emission={this.state.Co2Emission[this.state.indexYear1]}\n          onYearFilter={this.handleYearFilter}\n        />\n        <MyBarChart\n          chartName=\"Bar2\"\n          Co2Emission={this.state.Co2Emission[this.state.indexYear2]}\n          onYearFilter={this.handleYearFilter}\n        />\n        <MyBarChart\n          chartName=\"Bar3\"\n          Co2Emission={this.state.Co2Emission[this.state.indexYear3]}\n          onYearFilter={this.handleYearFilter}\n        />\n        <MyBarChart\n          chartName=\"Bar4\"\n          Co2Emission={this.state.Co2Emission[this.state.indexYear4]}\n          onYearFilter={this.handleYearFilter}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}